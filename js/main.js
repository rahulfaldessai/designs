var app=angular.module("myModule",["uiSlider","ngCookies"]);app.controller("mycontroller",["$scope","$http","$cookies","$cookieStore",function(t,e,a,i){e.get("https://api.myjson.com/bins/qzuzi").success((function(e){t.items=e})),t.sortlimit="-price",t.reverseSort=!1,t.searchData={},t.searchDataBy="$",t.lower_price_bound=100,t.upper_price_bound=1e4,t.priceRange=function(e,a){return parseInt(e)>=t.lower_price_bound&&parseInt(a)<=t.upper_price_bound},this.tab=1,this.selectTab=function(t){this.tab=t},this.isSelected=function(t){return this.tab===t},t.cart=[],t.total=0,t.discountValue=0,t.totalItems=0,angular.isUndefined(a.total)||(t.total=parseFloat(a.total)),angular.isUndefined(a.cart)||(t.cart=i.get("cart")),angular.isUndefined(a.discount)||(t.discountValue=parseFloat(a.discount)),angular.isUndefined(a.totalItems)||(t.totalItems=i.get("totalItems")),t.addItemToCart=function(e){if(0===t.cart.length)e.count=1,t.cart.push(e);else{for(var a=!1,s=0;s<t.cart.length;s++)t.cart[s].id===e.id&&(a=!0,t.cart[s].count+=1);a||(e.count=1,t.cart.push(e))}var r=new Date;r.setDate(r.getDate()+1),i.put("cart",t.cart,{expires:r}),t.cart=i.get("cart"),t.total+=parseFloat(e.price),i.put("total",t.total,{expires:r}),t.discountValue+=parseFloat(e.price-e.price/100*e.discount),i.put("discount",t.discountValue,{expires:r}),t.totalItems+=parseFloat(e.count),i.put("totalItems",t.totalItems,{expires:r})},t.removeItemCart=function(e){if(e.count>1){e.count-=1;var a=new Date;a.setDate(a.getDate()+1),i.put("cart",t.cart,{expires:a}),t.cart=i.get("cart")}else if(1===e.count){var s=t.cart.indexOf(e);t.cart.splice(s,1),(a=new Date).setDate(a.getDate()+1),i.put("cart",t.cart,{expires:a}),t.cart=i.get("cart")}t.total-=parseFloat(e.price),i.put("total",t.total,{expires:a}),t.discountValue-=parseFloat(e.price-e.price/100*e.discount),i.put("discount",t.discountValue,{expires:a}),t.totalItems-=parseFloat(e.count),i.put("totalItems",t.totalItems,{expires:a})},t.IsVisible=!1,t.ShowHide=function(){t.IsVisible=!t.IsVisible},t.IsVisible1=!1,t.ShowHide1=function(){t.IsVisible1=!t.IsVisible1},t.submitResult=function(e){t.sortlimit=e,t.IsVisible=!t.IsVisible}}]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
